@model BookStoreKAP.Models.DTO.PaginationModel
@{
    int totalPages = (int)Math.Ceiling(Model.TotalItems / (double)Model.PageSize);
    int currentPage = Model.CurrentPage;
    string action = Model.Action ?? "Index";
    string controller = Model.Controller ?? ViewContext.RouteData.Values["controller"].ToString();
}

<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (currentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action(action, controller, new { page = currentPage - 1 })" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }

        @for (int i = 1; i <= totalPages; i++)
        {
            if (i == currentPage)
            {
                <li class="page-item active"><span class="page-link">@i</span></li>
            }
            else
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action(action, controller, new { page = i })">@i</a>
                </li>
            }
        }

        @if (currentPage < totalPages)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action(action, controller, new { page = currentPage + 1 })" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
    </ul>
</nav>
